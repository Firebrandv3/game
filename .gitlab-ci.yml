#cache:
#  paths:
#    - target/

stages:
  - build
  - test
  - deploy
  - post-run

# our own git fetch command like https://gitlab.com/gitlab-org/gitlab-runner/blob/master/shells/abstract.go
# speeds up building because we skip the git clean and dont need any gitlab caches
variables:
  GIT_STRATEGY: none
before_script:
  - if [ -d .git ]; then
       echo "is git dir";
    else
       git clone $CI_REPOSITORY_URL . ;
    fi;
  - rm -f .git/index.lock
  - rm -f .git/shallow.lock
  - rm -f .git/HEAD.lock
  - rm -f .git/hocks/post-checkout
  - git remote set-url origin $CI_REPOSITORY_URL
  - git fetch origin --prune +refs/heads/*:refs/remotes/origin/* +refs/tags/*:refs/tags/*
  - git checkout -f -q $CI_COMMIT_SHA
  - git status
  - if [ -d target ]; then
       ls -la target;
    fi;
#  - git submodule update --init --recursive

build-voxygen:
  stage: build
  script:
    - (cd voxygen && cargo build)

build-voxygen-MR:
  stage: build
  script:
    - git pull "https://gitlab.com/${SOURCE_PROJECT}/game.git" "${SOURCE_BRANCH}"
    - (cd voxygen && cargo build)
  only:
    - trigger

build-headless:
  stage: build
  script:
    - git pull "https://gitlab.com/${SOURCE_PROJECT}/game.git" "${SOURCE_BRANCH}"
    - (cd headless && cargo build)

build-headless-MR:
  stage: build
  script:
    - git pull "https://gitlab.com/${SOURCE_PROJECT}/game.git" "${SOURCE_BRANCH}"
    - (cd headless && cargo build)
  only:
    - trigger

build-server-cli:
  stage: build
  script:
    - (cd server-cli && cargo build)

build-server-cli-MR:
  stage: build
  script:
    - (cd server-cli && cargo build)
  only:
    - trigger

unittests:
  stage: test
  script:
    - cargo test

unittests-MR:
  stage: test
  script:
    - cargo test
  only:
    - trigger

#benchmarktests:
#  stage: test
#  script:
#    - cargo bench

nightly-debug:
  stage: deploy
  script:
    - (cd voxygen && cargo build)
    - (cd server-cli && cargo build)
    - (cd headless && cargo build)
    - rm -r -f nightly
    - mkdir nightly
    - cp target/debug/server-cli nightly
    - cp target/debug/voxygen nightly
    - cp target/debug/headless nightly
    - cp -r voxygen/data nightly/data/
    - rm -f nightly-debug.tar.bz2
    - tar -cvjSf nightly-debug.tar.bz2 nightly
  when: always
  artifacts:
    paths:
      - nightly-debug.tar.bz2
    expire_in: 1 week
  only:
    refs:
      - master

#nightly-release:
#  stage: deploy
#  script:
#    - (cd voxygen && cargo build --release)
#    - (cd server-cli && cargo build --release)
#    - (cd headless && cargo build --release)
#    - rm -r -f nightly
#    - mkdir nightly
#    - cp target/release/server-cli nightly
#    - cp target/release/voxygen nightly
#    - cp target/release/headless nightly
#    - cp -r voxygen/vox nightly/vox
#    - rm -f nightly-release.tar.gz
#    - tar -zcvf nightly-release.tar.gz nightly
#  artifacts:
#    paths:
#      - nightly-release.tar.gz
#    expire_in: 1 week

nightly-windows-debug:
  stage: deploy
  script:
    - (cd voxygen && cargo build --target=x86_64-pc-windows-gnu)
    - (cd server-cli && cargo build --target=x86_64-pc-windows-gnu)
    - (cd headless && cargo build --target=x86_64-pc-windows-gnu)
    - rm -r -f nightly
    - mkdir nightly
    - cp target/x86_64-pc-windows-gnu/debug/server-cli.exe nightly
    - cp target/x86_64-pc-windows-gnu/debug/voxygen.exe nightly
    - cp target/x86_64-pc-windows-gnu/debug/headless.exe nightly
    - cp -r voxygen/vox nightly/vox
    - rm -f nightly-windows-debug.zip
    - zip -r nightly-windows-debug.zip nightly
  artifacts:
    paths:
      - nightly-windows-debug.zip
    expire_in: 1 week
  only:
    refs:
      - master

coverage:
  stage: post-run
  script:
    - if cargo install --list | grep -q "cargo-tarpaulin"; then
        echo "tarpaulin already installed";
      else
        RUSTFLAGS="--cfg procmacro2_semver_exempt" cargo install cargo-tarpaulin;
      fi
    - (cd common && cargo tarpaulin)
